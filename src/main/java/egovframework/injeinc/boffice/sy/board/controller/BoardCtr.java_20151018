package egovframework.injeinc.boffice.sy.board.controller;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.view.json.MappingJacksonJsonView;

import egovframework.cmm.CmmLogCtr;
import egovframework.cmm.Message;
import egovframework.cmm.service.EgovProperties;
import egovframework.injeinc.boffice.sy.board.service.BoardSvc;
import egovframework.injeinc.boffice.sy.board.vo.BoardVo;
import egovframework.injeinc.common.util.EgovDateUtil;
import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;

@Controller
public class BoardCtr extends CmmLogCtr{

	@Resource(name = "BoardSvc")
	private BoardSvc boardSvc;

	@Autowired(required=true)
	private MappingJacksonJsonView jsonView;
	
	private EgovDateUtil egovDateUtil;
	
	@RequestMapping(value= "/boffice/sy/board/Board_Form.do")
	public String BoardForm( HttpServletRequest request, @ModelAttribute("BoardVo") BoardVo boardVo, ModelMap model) throws Exception {
		return "injeinc/boffice/sy/board/board_form";
	}
	
	@RequestMapping(value= "/boffice/sy/board/Board_FormAx.do")
	public void TreeAjax(HttpServletRequest request, @ModelAttribute("BoardVo") BoardVo boardVo, HttpServletResponse response) {

		try {

			HttpSession ses = request.getSession();
			
			String flag = request.getParameter("flag");
			String cbIdx = request.getParameter("cbIdx");
			String cbCd = request.getParameter("cbCd");
			
			HashMap<String, String> param = new HashMap<String, String>();
			
			param.put("cbIdx", cbIdx);
			param.put("cbCd", cbCd);
			HashMap<String, Object> serviceMap = boardSvc.retriveTreeBoard(param);
			jsonView.render(serviceMap, request, response);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 게시판 코드 중복체크
	 * @param request
	 * @param response
	 */
	@RequestMapping(value= "/boffice/sy/board/BbsCode_CheckAx.do")
	public void bbsCodeCheck(HttpServletRequest request, HttpServletResponse response, @ModelAttribute("BoardVo") BoardVo boardVo) {

		try {

			HttpSession ses = request.getSession();
			
			String cbCd = boardVo.getCbCd();
			String cbUprCd = boardVo.getCbUprCd();
			
			HashMap<String, String> param = new HashMap<String, String>();
			
			param.put("cbCd", cbCd);
			param.put("cbUprCd", cbUprCd);
			HashMap<String, Object> serviceMap = boardSvc.retriveBbsCodeCheck(param);
			jsonView.render(serviceMap, request, response);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 게시판 메뉴 저장
	 * @param request
	 * @param response
	 * @param tree
	 * @return
	 */
	@RequestMapping(value="/boffice/sy/board/BoardOrd_FormAx.do",method=RequestMethod.POST)
	@ResponseBody
	public String appTreeFormAx(HttpServletRequest request, HttpServletResponse response,@RequestBody String tree){
		infoLog("TreeFormTest");
		HttpSession ses = request.getSession();
		HashMap<String,Object> param = new HashMap<String,Object> ();
		try{
			 
			JSONArray arrobj = (JSONArray)JSONValue.parse(tree);
			
			for(int i=0;i<arrobj.size();i++){
				JSONObject jsonobj = (JSONObject) arrobj.get(i);
				param.put("id_"+i, jsonobj.get("id"));
				param.put("parent_"+i, jsonobj.get("parent"));
				param.put("text_"+i, jsonobj.get("text"));
				param.put("position_"+i, i);
				param.put("useYn_"+i, jsonobj.get("useYn"));
				param.put("cbIdx_"+i, jsonobj.get("cbIdx"));
			}
			param.put("regid", ses.getAttribute("SesUserId"));
			param.put("objsize", arrobj.size());
			
			HashMap<String, Object> serviceMap = boardSvc.registTreeBoardMenu(param);
			HashMap<String, Object> jsonMap = new HashMap<String, Object>();
			jsonMap.put("SVC_CODE", serviceMap.get("SVC_CODE"));
			jsonMap.put("SVC_MSGE", serviceMap.get("SVC_MSGE"));
			
			jsonView.render(jsonMap, request, response);	
		
		}catch(Exception e){
			errorLog("TreeFormAjax ERROR!", e);
		}
		return null;
	}
	
	
	
	/**
	 * 게시판 상세설정화면
	 * @param request
	 * @param boardVo
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value= "/boffice/sy/board/Board_View.do")
	public String BoardView(
			HttpServletRequest request, @ModelAttribute("BoardVo") BoardVo boardVo
			, ModelMap model) throws Exception {

		return "injeinc/boffice/sy/board/board_view";		
	}
	
	/**
	 * 게시판 생성
	 * @param request
	 * @param boardVO
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value= "/boffice/sy/board/Board_FormReg.do")
	public String BoardFormReg(
			HttpServletRequest request, @ModelAttribute("BoardVo") BoardVo boardVO
			, ModelMap model) throws Exception {
		
		HttpSession ses = request.getSession();
		
		String SVC_MSGE = "";
		
		String cbIdx = request.getParameter("cbIdx");
		String cbCd = request.getParameter("cbCd");
		String mgrUrl = request.getParameter("mgrUrl");
		String regId = (String)ses.getAttribute("SesUserId");
		
		
		if(mgrUrl == null || mgrUrl == ""){
			mgrUrl = "-";
		}
		
		boardVO.setCbIdx(cbIdx);
		boardVO.setCbCd(cbCd);
		boardVO.setRegId(regId);
		System.out.println("cbCd ==============>>> : " + cbCd);
		System.out.println("boardVO ==============>>> : " + boardVO);
		try{
				String cbIdxNo = boardSvc.registCbIdxNo();
				
				boardVO.setCbIdx(cbIdxNo);
				
				boardSvc.registBoard(boardVO);
				
		} catch(Exception e){
			e.printStackTrace();
			SVC_MSGE = Message.getMessage("901.message"); //인서트성공
		}
		
		model.addAttribute("boardVO", boardVO);
		model.addAttribute("cbIdx", cbIdx);
		model.addAttribute("cbCd", cbCd);
		return alert("/boffice/sy/board/Board_Form.do", SVC_MSGE, model);
	}
	
	/**
	 * 게시판 생성
	 * @param request
	 * @param boardVO
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value= "/boffice/sy/board/Board_Reg.do")
	public String BoardReg(
			HttpServletRequest request, @ModelAttribute("BoardVo") BoardVo boardVO
			, ModelMap model) throws Exception {
		
		DefaultTransactionDefinition def = new DefaultTransactionDefinition();
		def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
		
		TransactionStatus status = transactionManager.getTransaction(def);
		
		HttpSession ses = request.getSession();
		
		String SVC_MSGE = "";
		
		String cbIdx = request.getParameter("cbIdx");
		String cbCd = request.getParameter("cbCd");
		String flag = request.getParameter("flag");
		String mgrUrl = request.getParameter("mgrUrl");
		String regId = (String)ses.getAttribute("SesUserId");
		
		String cudArray[] = request.getParameterValues("cud");
		String labelName[] = request.getParameterValues("labelName");
		String contentMapping[] = request.getParameterValues("contentMapping");
		String contentMappingL[] = request.getParameterValues("contentMappingL");
		String labelPropGbn[] = request.getParameterValues("labelPropGbn");
		String labelProvSize[] = request.getParameterValues("labelProvSize");
		String webUseYn[] = request.getParameterValues("webUseYnValue");
		String mobileUseYn[] = request.getParameterValues("mobileUseYnValue");
		String searchLabelUseYn[] = request.getParameterValues("searchLabelUseYnValue");
		String labelCompYn[] = request.getParameterValues("labelCompYnValue");
		String itemCode[] = request.getParameterValues("itemCodeSelectList");
		
		String bbsTemplet = request.getParameter("bbsTemplet").trim();
		
		int btIdx = 0;
		
		if(mgrUrl == null || mgrUrl == ""){
			mgrUrl = "-";
		}
		if(bbsTemplet == "0"){
			btIdx = 0;
		}else{
			btIdx = Integer.parseInt(bbsTemplet);
		}
		
		System.out.println("itemCode ====== > : " + itemCode);
		
		boardVO.setCbIdx(cbIdx);
		boardVO.setRegId(regId);
		boardVO.setModId(regId);
		boardVO.setBtIdx(btIdx);
		boardVO.setmListYn(boardVO.getmListYn());
		boardVO.setEditorYn(boardVO.getEditorYn());
		
		try{
			if("C".equals(flag)){
				String cbIdxNo = boardSvc.registCbIdxNo();
				boardVO.setCbIdx(cbIdxNo);
				
				boardSvc.registBoard(boardVO);
				boardSvc.registBbsConfig(boardVO);
				boardSvc.registBbsUsrConfig(boardVO);
//				if(bbsTemplet != null || bbsTemplet != ""){
//					boardSvc.registBbsTemplet(boardVO);
//				}
				
				boardSvc.removeConfigProperty(boardVO);
				int cnt = 0;
				for (int i=0; i < cudArray.length; i++) {
					if ( cudArray[i].equals("C") ){
						
						boardVO.setLabelCode(Integer.toString(i));
						if(contentMapping[i].equals("EXT")){
							if(contentMapping[i].length() > 3){
								boardVO.setContentMapping(contentMapping[i]);
								boardVO.setContentMappingL(contentMappingL[i]);
							}else{
								cnt++;
								boardVO.setContentMapping(contentMapping[i] + cnt);
								boardVO.setContentMappingL(contentMappingL[i] + cnt);
							}
						}else{
							boardVO.setContentMapping(contentMapping[i]);
							boardVO.setContentMappingL(contentMappingL[i]);
						}
						boardVO.setLabelName(labelName[i]);
						boardVO.setLabelPropGbn(labelPropGbn[i]);
						boardVO.setLabelProvSize(labelProvSize[i]);
						
						boardVO.setLabelCompYn(labelCompYn[i]);
						boardVO.setItemCode(itemCode[i]);
						boardVO.setSearchLabelUseYn(searchLabelUseYn[i]);
						boardVO.setWebUseYn(webUseYn[i]);
						boardVO.setMobileUseYn(mobileUseYn[i]);
						boardVO.setLabelOrdNo(Integer.toString(i));
						
						boardSvc.registConfigProperty(boardVO);
					}
				}
				cnt = 0;
				SVC_MSGE = Message.getMessage("201.message"); //인서트성공
			}else if("U".equals(flag)){
				
				boardSvc.modifyBoard(boardVO);
				boardSvc.modifyBbsConfig(boardVO);
				boardSvc.modifyBbsUsrConfig(boardVO);
				boardSvc.modifyBbsTemplet(boardVO);
				boardSvc.modifyConfigPropertyBbsTemplet(boardVO);
				
				boardSvc.removeConfigProperty(boardVO);
				int cnt = 0;
				for (int i=0; i < cudArray.length; i++) {
					if ( cudArray[i].equals("C") ){
						
						boardVO.setLabelCode(Integer.toString(i));
						if(contentMapping[i].equals("EXT")){
							if(contentMapping[i].length() > 3){
								boardVO.setContentMapping(contentMapping[i]);
								boardVO.setContentMappingL(contentMappingL[i]);
							}else{
								cnt++;
								boardVO.setContentMapping(contentMapping[i].substring(0, 3) + cnt);
								boardVO.setContentMappingL(contentMappingL[i].substring(0, 3) + cnt);
							}
						}else{
							boardVO.setContentMapping(contentMapping[i]);
							boardVO.setContentMappingL(contentMappingL[i]);
						}
						boardVO.setLabelName(labelName[i]);
						boardVO.setLabelPropGbn(labelPropGbn[i]);
						boardVO.setLabelProvSize(labelProvSize[i]);
						
						boardVO.setLabelCompYn(labelCompYn[i]);
						
						System.out.println("itemCode[i] =======================>> : " + itemCode[i]);
						
						boardVO.setItemCode(itemCode[i]);
						boardVO.setSearchLabelUseYn(searchLabelUseYn[i]);
						boardVO.setWebUseYn(webUseYn[i]);
						boardVO.setMobileUseYn(mobileUseYn[i]);
						boardVO.setLabelOrdNo(Integer.toString(i));
						
						//boardSvc.modifyConfigProperty(boardVO);
						boardSvc.registConfigProperty(boardVO);
					}
				}
				cnt = 0;
				System.out.println("cnt ==========>> : " + cnt);
				SVC_MSGE = Message.getMessage("401.message"); //수정성공
			}
		} catch(Exception e){
			e.printStackTrace();
			transactionManager.rollback(status);
			SVC_MSGE = Message.getMessage("901.message"); //인서트실패
		}
		
		transactionManager.commit(status);
		
		model.addAttribute("boardVO", boardVO);
		model.addAttribute("cbIdx", cbIdx);
		model.addAttribute("cbCd", cbCd);
		return alert("/boffice/sy/board/Board_Form.do", SVC_MSGE, model);
	}
	
	/**
	 * 게시판 삭제
	 * @param request
	 * @param boardVO
	 * @param model
	 * @return
	 * @throws Exception
	 */
	//@RequestMapping(value= "/boffice/sy/board/Board_Rmv.do")
	@RequestMapping(value= "/boffice/sy/board/Board_DelAx.do")
	public String BoardRmv(
			HttpServletRequest request, @ModelAttribute("BoardVo") BoardVo boardVO
			, HttpServletResponse response, ModelMap model) throws Exception {
		
		HttpSession ses = request.getSession();
		
		String SVC_MSGE = "";
		String regId = (String)ses.getAttribute("SesUserId");
		String cbCd = request.getParameter("cbCd");
		String selectCbIdx = "";
		
		HashMap<String, String> param = new HashMap<String, String>();
		
		param.put("regId", regId);
		param.put("modId", regId);
		param.put("cbCd", cbCd);
		
		try{
			selectCbIdx = boardSvc.selectCbIdx(boardVO);
			param.put("cbIdx", selectCbIdx);
			//boardSvc.removeBoard(boardVO);
			
			HashMap<String, Object> serviceMap = boardSvc.removeBoard(param);
			
			jsonView.render(serviceMap, request, response);
			model.addAttribute("serviceMap", serviceMap);
			
		} catch(Exception e){
			e.printStackTrace();
			SVC_MSGE = Message.getMessage("901.message"); //인서트성공
		}

		//return alert("/board/Board_List.do", SVC_MSGE, model); 		
		return alert("/boffice/sy/board/Board_View.do", SVC_MSGE, model); 		
	}

	
	/**
	 * 게시판 기본설정 조회
	 * @param request
	 * @param boardVO
	 * @param response
	 * @param model
	 * @throws Exception
	 */
	@RequestMapping(value= "/boffice/sy/board/Board_ViewAx.do")
	public void TreeViewAjax(
			HttpServletRequest request, @ModelAttribute("BoardVo") BoardVo boardVO
			, HttpServletResponse response, ModelMap model) throws Exception {

		try {

			HttpSession ses = request.getSession();
			HashMap<String, String> param = new HashMap<String, String>();
			
			String cbIdx = request.getParameter("cbIdx");
			String cbCd = request.getParameter("cbCd");	
			
			param.put("cbIdx", cbIdx);
			param.put("cbCd", cbCd);
			
			HashMap<String, Object> serviceMap = boardSvc.retriveBoard(param);

			jsonView.render(serviceMap, request, response);
			model.addAttribute("serviceMap", serviceMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 게시판 기본설정 조회
	 * @param request
	 * @param boardVO
	 * @param response
	 * @param model
	 * @throws Exception
	 */
	@RequestMapping(value= "/boffice/sy/board/Board_ViewListAx.do")
	public void TreeViewListAjax(
			HttpServletRequest request, @ModelAttribute("BoardVo") BoardVo boardVO
			, HttpServletResponse response, ModelMap model) throws Exception {

		try {

			HttpSession ses = request.getSession();
			HashMap<String, String> param = new HashMap<String, String>();
			
			String cbIdx = request.getParameter("cbIdx");
			String cbCd = request.getParameter("cbCd");	
			
			param.put("cbIdx", cbIdx);
			param.put("cbCd", cbCd);
			
			HashMap<String, Object> serviceMap = boardSvc.retriveBoardList(param);
			
			List<HashMap<String,String>> rowDataList = (List<HashMap<String, String>>) serviceMap.get("rowDataList");
			
			System.out.println("rowDataList =========>> : " + rowDataList);
			
			HashMap<String, Object> jsonMap = new HashMap<String, Object>();
			jsonMap.put("SVC_CODE", serviceMap.get("SVC_CODE"));
			jsonMap.put("SVC_MSGE", serviceMap.get("SVC_MSGE"));
			jsonMap.put("rowDataList", rowDataList);

			jsonView.render(jsonMap, request, response);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 카테고리 등록
	 * @param request
	 * @param boardVO
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/boffice/sy/board/Board_CategoryFormAx.do")
	public String CategoryFormAx(HttpServletRequest request, @ModelAttribute("BoardVo") BoardVo boardVO
			,HttpServletResponse response, ModelMap model){
		infoLog("CategoryFormAxTest");

		try{
			HttpSession ses = request.getSession();
			HashMap<String, String> param = new HashMap<String, String>();
		
			String cbIdx = request.getParameter("cbIdx");
			String categoryName = request.getParameter("categoryName");
			param.put("cbIdx", cbIdx);
			param.put("categoryName", categoryName);
			
			debugLog("param====>> : " + param);
			
			HashMap<String, Object> serviceMap = boardSvc.registCategory(boardVO);
			HashMap<String, Object> jsonMap = new HashMap<String, Object>();
			jsonMap.put("SVC_CODE", serviceMap.get("SVC_CODE"));
			jsonMap.put("SVC_MSGE", serviceMap.get("SVC_MSGE"));
			
			jsonView.render(jsonMap, request, response);	
		
		}catch(Exception e){
			errorLog("TreeFormAjax ERROR!", e);
		}
		return null;
	}
	
	
	/**
	 * 카테고리 조회
	 * @param request
	 * @param response
	 */
	@RequestMapping(value= "/boffice/sy/board/Category_ListAx.do")
	public void CategoryListAjax(HttpServletRequest request, HttpServletResponse response) {

		try {

			HttpSession ses = request.getSession();
			String cbIdx = request.getParameter("cbIdx");
			
			HashMap<String, String> param = new HashMap<String, String>();
			
			param.put("cbIdx", cbIdx);
			
			HashMap<String, Object> serviceMap = boardSvc.retriveListCategory(param);
			jsonView.render(serviceMap, request, response);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	/**
	 * 카테고리 삭제
	 * @param request
	 * @param boardVO
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/boffice/sy/board/Board_CategoryRmvAx.do")
	public void CategoryRmvAx(HttpServletRequest request, @ModelAttribute("BoardVo") BoardVo boardVO
			,HttpServletResponse response, ModelMap model){
		infoLog("CategoryDelAxTest");
		

		try{
			HttpSession ses = request.getSession();
			HashMap<String,Object> param = new HashMap<String,Object> ();
		
			String cbIdx = request.getParameter("cbIdx").trim();
			String categoryCode = request.getParameter("categoryCode").trim();
			
			boardVO.setCbIdx(cbIdx);
			boardVO.setCategoryCode(categoryCode);
			
			//param.put("cbIdx", cbIdx);
			//param.put("categoryCode", categoryCode);
			
			HashMap<String, Object> serviceMap = boardSvc.removeCategory(boardVO);
			
			System.out.println("boardVO ===============>> : "+boardVO);
			
			//boardSvc.removeCategory(boardVO);
			
			HashMap<String, Object> jsonMap = new HashMap<String, Object>();
			jsonMap.put("SVC_CODE", serviceMap.get("SVC_CODE"));
			jsonMap.put("SVC_MSGE", serviceMap.get("SVC_MSGE"));
			
			jsonView.render(jsonMap, request, response);	
		
		}catch(Exception e){
			errorLog("TreeFormAjax ERROR!", e);
		}
		//return null;
	}
	
	
	/**
	 * label selectbox 조회
	 * @param request
	 * @param response
	 */
	@RequestMapping(value= "/boffice/sy/board/LabelCode_ListAx.do")
	public void LabelCodeListAjax(HttpServletRequest request, HttpServletResponse response) {

		try {

			HttpSession ses = request.getSession();
			String cbIdx = request.getParameter("cbIdx");
			
			HashMap<String, String> param = new HashMap<String, String>();
			
			param.put("cbIdx", cbIdx);
			
			HashMap<String, Object> serviceMap = boardSvc.retriveListLabelCode(param);
			jsonView.render(serviceMap, request, response);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 템플릿파일 등록
	 * @param request
	 * @param boardVO
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/boffice/sy/board/Board_TempletRegAx.do")
	public String BoardTempletRegAx(HttpServletRequest request, @ModelAttribute("BoardVo") BoardVo boardVO
			,HttpServletResponse response, ModelMap model){
		
		infoLog("BoardTempletRegAxTest");
		
		HttpSession ses = request.getSession();

		String date = egovDateUtil.yearMonthDay();
		String SVC_MSGE = "";
		String rootPath = EgovProperties.getProperty("WasServer.ROOT_PATH");
		String uploadPath = Message.getMessage("boardTemplet.file.upload.path"); //첨부파일경로 fileUploadProperties.properties에서 경로 설정
		
		String cbIdx = request.getParameter("cbIdx");
		String bbsTempletGbn = request.getParameter("bbsTempletGbn");
		String templetName = request.getParameter("templetName");
		String regId = (String)ses.getAttribute("SesUserId");

		
		
		uploadPath = rootPath + uploadPath + date + "/";
		File saveFolder = new File(uploadPath);
		  if (!saveFolder.exists() || saveFolder.isFile()) saveFolder.mkdirs();

		debugLog("uploadPath ====>> : " + uploadPath); 
		  
		MultipartHttpServletRequest multipartRequest =  (MultipartHttpServletRequest)request;
		
		//단일 파일 업로드
		//MultipartFile file = multipartRequest.getFile("fileUpload"); 
		
		//다중파일 업로드
		List<MultipartFile> files = multipartRequest.getFiles("uploadFile"); 
		
		try{
			String cbIdxNo = boardSvc.registCbIdxNo();
			for(MultipartFile file : files){
				if(!file.isEmpty()){            
					File ufile = new File(uploadPath + file.getOriginalFilename());    
					String fileName = file.getOriginalFilename();
					String fileSize = Integer.toString((int)file.getSize());
					String filePath = uploadPath;    
					String imgExt = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length());
					
					int bbsTempletNo = boardSvc.registBbsTempletNo(boardVO);
					
					if(cbIdx == null || cbIdx == "" || cbIdx == "0" || cbIdx == "1" || cbIdx == "2"){
						boardVO.setCbIdx(cbIdxNo);
					}else{
						boardVO.setCbIdx(cbIdx);
					}
					
					boardVO.setBbsTempletGbn(bbsTempletGbn);
					boardVO.setBtIdx(bbsTempletNo);
					boardVO.setFileName(templetName);
					boardVO.setBbsTempletFileName(fileName);
					boardVO.setBbsTempletFileSize(fileSize);
					boardVO.setBbsTempletFilePath(filePath);            
					boardVO.setBbsTempletFileType(imgExt);            
					boardVO.setRegId(regId);

					
					HashMap<String, Object> serviceMap = boardSvc.registBbsTemplet(boardVO);
					HashMap<String, Object> jsonMap = new HashMap<String, Object>();
					jsonMap.put("SVC_CODE", serviceMap.get("SVC_CODE"));
					jsonMap.put("SVC_MSGE", serviceMap.get("SVC_MSGE"));
					
					jsonMap.put("sCbIdx", boardVO.getCbIdx());
					jsonMap.put("sBbsTempletGbn", boardVO.getBbsTempletGbn());
					
					jsonView.render(jsonMap, request, response);

					file.transferTo((ufile));
					SVC_MSGE = Message.getMessage("201.message"); //인서트성공
				}
			} 
			
			
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return null;
	}
	
	/**
	 * 템플릿파일 조회
	 * @param request
	 * @param response
	 */
	@RequestMapping(value= "/boffice/sy/board/BbsTempletFile_ListAx.do")
	public void BbsTempletFileListAjax(HttpServletRequest request, HttpServletResponse response) {

		try {

			HttpSession ses = request.getSession();
			String cbIdx = request.getParameter("cbIdx");
			String bbsTempletGbn = request.getParameter("bbsTempletGbn");
			
			HashMap<String, String> param = new HashMap<String, String>();
			
			param.put("cbIdx", cbIdx);
			param.put("bbsTempletGbn", bbsTempletGbn);
			
//			registBbsTempletNo
			
			HashMap<String, Object> serviceMap = boardSvc.retriveListBbsTemplet(param);
			jsonView.render(serviceMap, request, response);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 템플릿파일 조회
	 * @param request
	 * @param response
	 */
	@RequestMapping(value= "/boffice/sy/board/BbsSelectItem_ListAx.do")
	public void BbsSelectItemListAjax(HttpServletRequest request, HttpServletResponse response) {
		
		try {
			HttpSession ses = request.getSession();
			HashMap<String, Object> serviceMap = boardSvc.retriveSelectItemList();
			jsonView.render(serviceMap, request, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}